🚗 轨迹处理
===================================


行程切分
-----------------------------

原始的GPS数据包含了一辆车的多次出行，我们需要对车辆的出行进行划分。那么如何理解主行程和子行程？


.. image:: _static/images/gps_process/行程切分.png
    :align: center

* 主行程举例
    一辆车从家出发到达公司，将车辆停在车库，熄火后，车辆不再产生GPS数据，下班后再次启动，GPS数据重新产生，早上到达公司的最后一个定位点和下班后启动车辆的第一个定位点，其时间差超过group_gap_threshold，则在此处切分主行程

* 子行程举例
 一辆车从家出发到达公司，在到达公司之前，在加油站加油，GPS点持续产生，但是定位点集中在加油站附近，产生了停留，那么从家-加油站就是一段子行程


每一个段主行程、子行程，均拥有一个全局唯一的agent_id


GpsPreProcess类初始化
```````````````````````````````

GpsPreProcess提供了行程切分(trip_segmentations)、抽取带途径点信息的OD(sampling_waypoints_od)这两大功能，你只需要传入GPS表数据即可，确保GPS数据满足 :doc:`数据要求` 中的GPS数据要求。

类初始化参数为：

* gps_df
    gps数据表，类型：pd.DataFrame，必须指定

* use_multi_core
    是否启用多核并行，默认False，数据量较大时可以启用

* used_core_num
    启用的核数，默认2


行程切分(trip_segmentations)
`````````````````````````````````````````````````````

trip_segmentations函数提供了主行程和子行程的划分功能，示例代码如下：


.. code-block:: python
    :linenos:

    import pandas as pd
    from gotrackit.gps.GpsTrip import GpsPreProcess

    if __name__ == '__main__':
        # 读取GPS数据
        gps_gdf = pd.read_csv(r'data/output/gps/example/origin_gps.cssv')

        # 新建一个GpsPreProcess示例
        grp = GpsPreProcess(gps_df=gps_gdf, use_multi_core=False)

        # 调用trip_segmentations方法进行行程切分
        # 切分后的数据会更新agent_id字段用以区分不同的出行旅程，原GPS表的agent_id会存储在origin_agent_id字段中
        gps_trip = grp.trip_segmentations(group_gap_threshold=1800, plain_crs='EPSG:32650', min_distance_threshold=10.0)

        gps_trip.to_csv(r'./data/output/gps/example/gps_trip.csv', encoding='utf_8_sig', index=False)


trip_segmentations函数相关参数如下：

* time_format
    GPS数据中时间列的格式化字符串模板, 默认"%Y-%m-%d %H:%M:%S"，可以参照pandas中pd.to_datetime()函数的format参数

    参考：`pd.to_datetime解释 <https://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.to_datetime.html#>`_、`ISO_8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

* time_unit
    GPS数据中时间列的单位, 如果时间列是数值(秒或者毫秒,s 或者 ms), 系统会自动按照该参数构建时间列, 默认's'。Gotrackit会先尝试使用time_format进行时间列构建，如果失败会再次尝试使用time_unit进行时间列构建

* plain_crs
    依据研究范围，选择一个合适的平面投影坐标系，详情见 :doc:`数据要求` 中的平面投影坐标系解释

* group_gap_threshold
    时间阈值，主行程划分参数，单位秒，如果前后GPS点的定位时间超过该阈值，则在该点切分主行程，默认1800s(30分钟)

* min_distance_threshold
    子行程切分距离阈值，单位米，默认10.0m，如果你只想划分主行程，则指定min_distance_threshold为负数即可

* dwell_accu_time
    子行程切分时间阈值，秒，默认60秒

* n
    子行程切分参数，整数，如果超过连续n个gps点的距离小于min_distance_threshold 且 持续时间超过dwell_accu_time，那么该处被识别为停留点，从该处切分子行程，默认5



.. _途径点OD计算:

从GPS数据计算途径点OD
`````````````````````````````````````````````````````

如果你的GPS数据已经完成了行程切分，且已经按照agent_id、time两个字段升序排列，那么你可以直接使用该接口进行途径点的抽样，得到带途径点的OD数据表

示例代码如下：

.. code-block:: python
    :linenos:

    import pandas as pd
    from gotrackit.gps.GpsTrip import GpsPreProcess

    if __name__ == '__main__':
        # 读取GPS数据
        gps_gdf = pd.read_csv(r'data/output/gps/example/gps_trip.cssv')

        # 新建一个GpsPreProcess示例
        grp = GpsPreProcess(gps_df=gps_gdf, use_multi_core=False)

        # 返回的第一个数据是OD表(pd.DataFrame)，第二个数据是OD线(gpd.GeoDataFrame)
        gps_od, od_line = grp.sampling_waypoints_od(way_points_num=2)
        gps_od.to_csv(r'./data/output/gps_od.csv', encoding='utf_8_sig', index=False)
        od_line.to_file(r'./data/output/gps_od.shp')


sampling_waypoints_od相关参数如下：

* way_points_num
    整数，OD的途径点数目，必须≤10，默认5个途径点





轨迹数据清洗
-----------------------------

要使用gotrackit的轨迹数据清洗模块，确保输入的GPS数据满足 :doc:`数据要求` 中的GPS数据要求。

利用gotrackit提供的TrajectoryPoints类可以对轨迹数据进行各种预处理：间隔采样、停留点识别、滑动窗口平均、轨迹点简化、卡尔曼滤波平滑，这些方法都封装在了TrajectoryPoints类中

TrajectoryPoints初始化的相关参数有：

* gps_points_df
    gps数据

.. _时间列构建参数:

* time_format
    GPS数据中时间列的格式化字符串模板, 默认"%Y-%m-%d %H:%M:%S"，可以参照pandas中pd.to_datetime()函数的format参数

    参考：`pd.to_datetime解释 <https://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.to_datetime.html#>`_、`ISO_8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

* time_unit
    GPS数据中时间列的单位, 如果时间列是数值(秒或者毫秒,s 或者 ms), 系统会自动按照该参数构建时间列, 默认's'。Gotrackit会先尝试使用time_format进行时间列构建，如果失败会再次尝试使用time_unit进行时间列构建


* plain_crs:
    要使用的平面投影坐标系，默认None，用户若不指定，程序会依据路网的经纬度范围自动进行6度投影带的选择, 推荐使用程序自动

    若要手动指定：参见: 详情见 :doc:`数据要求` 中的平面投影坐标系解释

TrajectoryPoints提供了以下轨迹点清洗方法：


停留点删除
````````````````````````

.. image:: _static/images/gps_process/删除停留点.png
    :align: center

--------------------------------------------------------------------------------

* del_dwell_points():

    dwell_l_length: 停留点识别距离阈值, 默认值5.0m

    dwell_n: 超过连续dwell_n个相邻GPS点的距离小于dwell_l_length，那么这一组点就会被识别为停留点，默认2


轨迹点增密
````````````````````````

.. image:: _static/images/gps_process/轨迹增密.png
    :align: center

--------------------------------------------------------------------------------

* dense():
    dense_interval: 当相邻GPS点的球面距离L超过dense_interval即进行增密, 进行 int(L / dense_interval) + 1 等分加密, 默认100.0


轨迹点降频
``````````````````````````

.. image:: _static/images/gps_process/间隔采样.png
    :align: center

--------------------------------------------------------------------------------

* lower_frequency():
    lower_n: 降频倍率, 默认2


滑动窗口平滑
``````````````````````````


.. image:: _static/images/gps_process/滑动窗口平均.png
    :align: center

--------------------------------------------------------------------------------

* rolling_average():
    rolling_window: 滑动窗口大小, 默认2


离线卡尔曼滤波平滑
``````````````````````````

.. image:: _static/images/gps_process/离线卡尔曼.png
    :align: center

--------------------------------------------------------------------------------

* kf_smooth():

    p_deviation:  转移过程的噪声标准差，默认0.01

    o_deviation:  观测过程的噪声标准差，默认0.1，o_deviation越小， 滤波平滑后的结果越接近观测轨迹(即源轨迹)

.. note::
    定位数据的time列对平滑的效果有影响，如使用滤波平滑，请确保你的定位数据时间列的合理性



轨迹简化
``````````````````````````


.. image:: _static/images/gps_process/轨迹简化.png
    :align: center

--------------------------------------------------------------------------------

* simplify_trajectory():

    l_threshold: 简化阈值，默认5.0m


轨迹清洗和可视化
``````````````````````````

.. image:: _static/images/gps_process/链式操作.png
    :align: center

--------------------------------------------------------------------------------


示例代码如下：

.. code-block:: python
    :linenos:

    import pandas as pd
    from gotrackit.gps.Trajectory import TrajectoryPoints

    if __name__ == '__main__':
        gps_df = pd.read_csv(r'gps.csv')

        # 去除同一出行中的相同定位时间点数据
        gps_df.drop_duplicates(subset=['agent_id', 'time'], keep='first', inplace=True)
        gps_df.reset_index(inplace=True, drop=True)

        # 构建TrajectoryPoints类, 并且指定一个plain_crs
        tp = TrajectoryPoints(gps_points_df=gps_df, time_unit='ms', plain_crs='EPSG:32649')

        # 间隔3个点采样一个点
        # tp.lower_frequency(lower_n=3)


        # 卡尔曼滤波平滑
        tp.kf_smooth()

        # 使用链式操作自定义预处理的先后顺序, 只要保证kf_smooth()操作后没有执行 - 滑动窗口平滑、增密，处理后的轨迹数据即可得到分项速度数据
        # tp.simplify_trajectory().del_dwell_points()
        # tp.dense().kf_smooth()
        # tp.lower_frequency().dense().kf_smooth()


        # 获取清洗后的结果
        # _type参数可以取值为 df 或者 gdf
        process_df = tp.trajectory_data(_type='df')

        out_fldr = r'./data/output/'

        # 存储结果
        process_df.to_csv(os.path.join(out_fldr, r'after_reprocess_gps.csv'), encoding='utf_8_sig', index=False)

        # 输出为html进行动态可视化
        tp.export_html(out_fldr=out_fldr, file_name='sample')


.. note::
    使用链式操作自定义预处理的先后顺序, 只要保证kf_smooth()操作后没有执行: 滑动窗口平滑，处理后的轨迹数据即可得到分项速度数据



输出的html文件可以动态可视化清洗前后的轨迹点对比


.. image:: _static/images/gps_process/visualization.png
    :align: center

--------------------------------------------------------------------------------

